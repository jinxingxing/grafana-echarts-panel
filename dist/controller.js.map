{"version":3,"sources":["../src/controller.js"],"names":["MetricsPanelCtrl","_","kbn","echarts","DataFormatter","Controller","$scope","$injector","panelDefaults","EchartsOption","IS_UCD","METHODS","ETYPE","url","method","upInterval","esMetric","defaults","panel","dataFormatter","events","on","onDataReceived","bind","onDataError","onInitEditMode","render","refreshData","dataList","data","customizeData","chartType","setGeohashValues","aggByProvince","refreshed","err","addEditorTab","_this","xmlhttp","window","XMLHttpRequest","ActiveXObject","onreadystatechange","readyState","status","JSON","parse","responseText","open","send","$timeout","grafanaBootData","settings","panels","pluginId","baseUrl","scope","elem","attrs","ctrl","$panelContainer","find","option","echartsData","setHeight","height","row","isString","parseInt","replace","style","myChart","init","setTimeout","resize","callInterval","timeout","result","func","callBack","interval","context","args","arguments","clearInterval","setInterval","apply","clear","eval","setOption","renderingCompleted","templateUrl"],"mappings":"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","file":"controller.js","sourcesContent":["import { MetricsPanelCtrl } from 'app/plugins/sdk';\nimport _ from 'lodash';\nimport kbn from 'app/core/utils/kbn';\n\nimport echarts from './libs/echarts.min';\nimport './libs/dark';\nimport './style.css!';\nimport './libs/china.js';\nimport './libs/bmap.js';\nimport './libs/getBmap.js';\n\nimport DataFormatter from './data_formatter';\n\n\n\nexport class Controller extends MetricsPanelCtrl {\n\n    constructor($scope, $injector) {\n        super($scope, $injector);\n\n        const panelDefaults = {\n            EchartsOption: 'option = {};',\n            IS_UCD: false,\n            METHODS: ['POST', 'GET'],\n            ETYPE: ['line', 'pie', 'map'],\n            url: '',\n            method: 'POST',\n            upInterval: 60000,\n            esMetric: 'Count'\n        };\n\n        _.defaults(this.panel, panelDefaults);\n\n        this.dataFormatter = new DataFormatter(this, kbn);\n\n        this.events.on('data-received', this.onDataReceived.bind(this));\n        this.events.on('data-error', this.onDataError.bind(this));\n        this.events.on('data-snapshot-load', this.onDataReceived.bind(this));\n        this.events.on('init-edit-mode', this.onInitEditMode.bind(this));\n        this.events.on('panel-initialized', this.render.bind(this));\n\n        this.refreshData();\n    }\n\n\n    onDataReceived(dataList) {\n        this.data = this.panel.IS_UCD ? this.customizeData : dataList;\n\n        if (this.panel.chartType == 'map') {\n            const data  = [];\n            this.dataFormatter.setGeohashValues(this.data, data);\n            this.data = this.dataFormatter.aggByProvince(data);\n        }\n\n        this.refreshed = true;\n        this.render();\n        this.refreshed = false;\n    }\n\n\n    onDataError(err) {\n        this.render();\n    }\n\n\n    onInitEditMode() {\n        this.addEditorTab('Customize Data', 'public/plugins/grafana-echarts-panel/partials/editor-ds.html', 2);\n        this.addEditorTab('Echarts Option', 'public/plugins/grafana-echarts-panel/partials/editor-echarts.html', 3);\n    }\n\n\n    refreshData() {\n        let _this = this, xmlhttp;\n\n        if (window.XMLHttpRequest) {\n            xmlhttp = new XMLHttpRequest();\n        } else {\n            xmlhttp = new ActiveXObject(\"Microsoft.XMLHTTP\");\n        }\n\n        let data = [];\n        xmlhttp.onreadystatechange = function () {\n            if (xmlhttp.readyState == 4 && xmlhttp.status == 200) {\n                _this.customizeData = JSON.parse(xmlhttp.responseText);\n                _this.onDataReceived();\n            }\n        };\n\n        if (this.panel.IS_UCD) {\n            xmlhttp.open(_this.panel.method, _this.panel.url, true);\n            xmlhttp.send();\n        } else {\n            xmlhttp = null;\n        }\n\n        this.$timeout(() => { this.refreshData(); }, _this.panel.upInterval);\n    }\n\n\n    getPanelPath() {\n        // the system loader preprends publib to the url, add a .. to go back one level\n        return '../' + grafanaBootData.settings.panels[this.pluginId].baseUrl + '/';\n    }\n\n\n    link(scope, elem, attrs, ctrl) {\n        const $panelContainer = elem.find('.echarts_container')[0];\n        let option = {}, echartsData = [];\n\n        ctrl.refreshed = true;\n\n        function setHeight() {\n            let height = ctrl.height || panel.height || ctrl.row.height;\n            if (_.isString(height)) {\n                height = parseInt(height.replace('px', ''), 10);\n            }\n\n            $panelContainer.style.height = height + 'px';\n        }\n\n        setHeight();\n\n        let myChart = echarts.init($panelContainer, 'dark');\n\n        setTimeout(function () {\n            myChart.resize();\n        }, 1000);\n\n        var callInterval = function callInterval() {\n            var timeout, result;\n\n            function func(callBack, interval) {\n                var context = this; // jshint ignore:line\n                var args = arguments;\n\n                if (timeout) clearInterval(timeout);\n\n                timeout = setInterval(function () {\n                    result = callBack.apply(context, args);\n                }, interval);\n\n                return result;\n            }\n\n            return func;\n        }();\n\n        function render() {\n\n            if (!myChart) {\n                return;\n            }\n\n            setHeight();\n            myChart.resize();\n\n            if (ctrl.refreshed) {\n                myChart.clear();\n                echartsData = ctrl.data;\n\n                eval(ctrl.panel.EchartsOption); // jshint ignore:line\n\n                myChart.setOption(option);\n            }\n        }\n\n        this.events.on('render', function () {\n            render();\n            ctrl.renderingCompleted();\n        });\n    }\n}\n\nController.templateUrl = 'partials/module.html';\n"]}